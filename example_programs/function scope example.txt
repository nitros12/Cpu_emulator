call main
halt


_main nop
pushstk #0
pushstk #0

input [@stk+0]
input [@stk+1]

call somefunc [@stk+0] [@stk+1]
; we return with our variable on the bottom of the stack
prntint @ret
popstk ; pop second temp var
popstk ; pop first temp var
ret


_somefunc nop ; takes 2 arguments, has one temporary variable
prntint [@stk+0] ; print first var
prntint [@stk+1]
_somefunc_loop nop
mov [@stk+0] @acc ; moves second argument into accumulator
add @acc ; adds to itself
mov @acc [@stk+0] ; move value stored in @acc to second argument position
mov [@stk+1] @acc ; move first variable into accumulator
sub #1
cmp @acc ; compare accumulator with 0
mov @acc [@stk+1] ; move back into stack
mje somefunc_loop ; if more than 0, jump to start
; otherwise
mov [@stk+0] @ret ; move second argument into return
popstk
popstk
ret; return





