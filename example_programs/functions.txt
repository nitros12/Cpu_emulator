varA 0
input varA
varB 0
input varB
; initialise variables (ideally we shouldn't do this and just have a compiler
; automatically determine when it can overwrite an unused variable
call addvar varA varB
popstk varA
prntint varA

call recurse #400

popstk @eax
prntint @eax

halt

_addvar nop
mov [@stk+1] @acc
add [@stk+2]
pop
pop
mov @acc @ret
ret

_recurse nop

popstk @acc
prntint @acc
sub #1
cmp @acc
lje recreturn  ; if jump to return function, begin return chain
call recurse @acc  ; otherwise call self again

popstk @eax ; pop what is returned from function when it starts the return chain
prntint @eax ; print what is returned
mov @acc @ret ;move accumulator into return register
_recreturn ret
